 ----------------------------------------------------------------------------- MSSQL -----------------------------------------------------------------------------------
 - ROUND: 소수 반올림, 버림, 올림 하는 Function

 ----------------------------------------------------------------------------- JAVA -----------------------------------------------------------------------------------
 - @Scheduler 설정하기
    - <context:component-scan>을 통해 package를 스캔 한후 진행을 해야 함

 - 객체 
      - 객체는 데이터와 로직을 묶어놓은 일종의 추상적인 틀인 클래스로부터 만들어진 복사본
 - 생성자
      - 객체 생성시 객체를 초기화하고 heap에 저장하는 메소드, 생산자는 클래스명과 동일하며 종료할 때 값을 반환하지 않는다.
  1. New 연산자가 객체가 저장될 메모리 공간 할당
  2. 생성자가 Image 객체를 초기화 후 종료
  3. new 연산자가 새로 생성된 객체의 주소를 변수에 저장
  4. 변수 명을 통해 객체에 접근 가능

 - Java WebScraping
    - Jsoup: JSON에 따른 ajax는 callback을 확인하고 다룰 수 있지만 Document Ajax의 경우 다룰 수 없기에 HtmlUnit을 이용하여 Html코드를 받아오s고 Parsing만 Jsoup
    - 

 - platform.xml

 - iterator
    - 모든 collection(List, Set)으로 부터 정보를 얻을 수 있는 인터페이스
    - hasNext(): 다음 값이 있는지 없는지 확인
    - next(): 다음 값을 리턴

 - Collection Interface
    - 모든 콜렉션의 상위 인터페이스로써 핵심 메소드를 선언
    - List Interface
      - ArrayList
      - Vector
      - LinkedList
    - Set Interface
      - HashSet
      - LinkedHashSet
      - TreeSet
    - Map Interface
      - HashMap
      - HashTable
      - TreeMap



 - charAt(인수): 인수번째 문자를 읽어냄
 - indexOf(문자): 해당 문자의 위치 알려줌
 - lastIndexOf(문자): 마지막 해당문자의 위치 알려줌
 - substring(인수, 인수): 시작 지점부터 끝지점까지 문자열을 추출
 - length(): 인수의 길이 출력
 - http://egloos.zum.com/khpower/v/3027012

 
 -	int i = scan.nextInt(); // (1)
	String s = scan.nextLine(); // (2)
    -> 이경우 i에 정수 입력 후 Enter를 누르면 \r\n이라는 개행문자가 남아 이걸 nextLine이 읽어드려서 nextLine()이 동작하지 않을 수 있음


 - Scanner vs BufferedReader
    - Scanner의 버퍼 크기는 1024 chars, 반면 BufferReader의 버퍼 크기는 8192 chars이다.
      -> 큰파일의 경우 BufferReader가 유리함
    - BufferReader는 문자열을 단순히 읽고 저장, Scanner는 문자열을 구분하여 분석할 수 있다.
      -> Scanner는 구문 기호 사용 가능
    - BufferReader는 동기화 된다. 반면 Scanner는 동기화가 되지 않는다.
      -> BufferReader는 멀티 쓰레드에 안전함(동기화)
    - BufferReader는 즉시 IOException 처리를 던지지만, Scanner는 숨긴다.
      -> Scanner가 손이 덜감~

 - null
    - int
      -> int형은 null이 존재하지 않고 0으로 존재함 if(ppp == 0) 으로 확인
    - char
      -> 
    - 값 null로 치환
      -> ppp = null(X), ppp='\0' ( \0는 0x00을 의미함)





 - equals: 대상의 내용 자체를 비교하는 메소드
 -  == : 대상의 주소값을 비교하는 연산자
 - 비교시 앞부분이 기준
 
  - Int
    - mypage.getAddress_sq() == 0  ------------------ O

  - String
    - mypage.getRecipient_nm() == ""  --------------- X
    - "" == mypage.getRecipient_nm()  --------------- X
    - "".equals(mypage.getRecipient_nm())  ---------- O
    - mypage.getRecipient_nm() == null  ------------- X

  - JSP
    - $("#recipient_phone_no").val() == undefined  -- X
    - $("#recipient_phone_no").val() == ""  --------- O


Log 찍기

Java
Logger log = Logger.getLogger(this.getClass());

System.out.println(commandMap); 		// commandMap: HashMap
System.out.println(param);			// param: RequestParam HashMap
printQueryId(queryId);
param.get______();
for(int i=0; i<applyForPrintMaterial.size(); i++){
	System.out.println(i+"번째 applyForPrintMaterial값 : " + applyForPrintMaterial.get(i).toString());
}


sysout 대신 debug도 이용 가능

 - Null과 공백은 구분하여 사용해 주어야 함!!!
 - Request의 경우 String의 형태로 오기 때문에 int형인경우 그렇게 수정해 주어야 함!
 - extends 같이 상속된 값을 바꾸고 싶은경우!
  ->  <input type="hidden" value="1" name="pageNo" id="pageNo" />
    	

 - Parameter Type: 파라미터타입은 값을전달 할 것이 있을때만 사용하면 됨, SQL문에서 Hashmap으로 데이터를 주고 받아도 되지만 SQL문은 은 mybatis를
		  사용하기 때문에 mybatis-config.xml에서 데이터 형태(?)를 정해놓고 주고받아도 좋음!!


 Parameter 있는경우
@Override
public int selectStoreListCount(StoreList param) throws Exception{
	// TODO Auto-generated method stub
	return sqlSession.selectOne("storelist.selectStoreListCount", param);
}

 Parameter 없는경우
@Override
public int selectStoreListCount(StoreList param) throws Exception{
	// TODO Auto-generated method stub
	return sqlSession.selectOne("storelist.selectStoreListCount");
}

 Parameter 있는 경우
<select id="selectStoreListCount" parameterType="storelist" resultType="int">
	SELECT count(*) as count
	FROM  [3DP_STORE]
</select>

 Parameter 없는경우
<select id="selectStoreListCount" parameterType="storelist" resultType="int">
	SELECT count(*) as count
	FROM  [3DP_STORE]
</select>



Paging --> pageNo frm 을 jsp에서 따로 지정 필요
tile --> header, footer 등등을 따로 지정해두고 필요한 것만 모아서 사용 할 수 있도록 해줌




 List<StoreList> storeLst = new ArrayList<>();
 storeLst = storeListService.selectStoreList(param,  new RowBounds(param.getStart(), param.getPageSize()));
 - > 구분하여 사용 가능!
		

 

 - Class List 필드의 값 추가
  StoreList AA = new StoreList(); (AA라는 새로운 Class객체를 만듬)
   AA.setRnum(" ");		  (colunm명의 첫 스펠링은 대문자로 씀)
   AA.setCmpny_nm(" ");
   AA.setStore_sq(" ");

  storeLst.add(AA); (storeLst라는 List에 AA를 추가해줌

 - &nbsp --> 문자로서의 공백!(" " 또는 공백과 다름)


 - SQL문을 통해 DB에서 값을 받아올 때 Map 형식인 경우 무조건 JSP에서 대문자로 사용되고 Domain의 형식인 경우 Domain의 형식을 따라간다.


 - HttpServletRequest는 name을 이용하여 값을 전송하는데 그냥 찍으면 데이터가 저장된 주소값이 나오기 때문에 따로 tostring을 override하여서 찍어주는 형태를 구현해야함 
	@Override
	public String toString() {
		return "SettingVO [isChanged=" + Arrays.toString(isChanged)
				+ ", linkurl=" + Arrays.toString(linkurl) + ", parentNum="
				+ Arrays.toString(parentNum) + ",ag=" + Arrays.toString(ar) + "]";
	}


 - new String()
 자바는 내부 문자열을 유니코드로 처리함
 String::getBytes --> Unicode 문자열을 인자로 하여 지정된 Character Set(UTF-8, EUC-KR...etc)의 바이트 배열로 반환하는 메서드
 new String(Byte 배열, Character Set) -> 해당 바이트배열을 주어진 Character Set으로 간주하여 스트링을 만듬


 - Final vs Abstract vs Interface
	  Final        Abstract       
Class	 상속 X        상속 필요
Method   Override X   Override 필수
Var      상수 지시         X


Interface: 추상 Method의 집합체


[ class 의 경우 ]
public     : 모든 팩키지에서 이 클래스를 참조할수 있다.
private    : 자신을 포함한 클래스에서만 참조가능
protected : 자신을 포함하는 클래스에서 상속받은 클래스에서도 참조가능

[ 메소드의 경우 ]
public     : 이 클래스밖에서도 이 메소드를 참조할수 있다.
private    : 이 클래스내에서만 참조가능
protected : 상속받은 클래스와 이 클래스내에서만 참조할수있다.

 - JSP에서 JAVA로 POST의 방식으로 form태그안의 값을 보내면 java에서는 첫번째 domain의 input의 이름과 같은 column에 그 값이 들어감

 - mybatis.xml에 도메인정보를 입력해야 SQL에서 사용 가능함

 - Post API(우체국) API같은 것이 안되는경우 SERVER에 한글이 호환이 안되는경우가 있음
    - 이경우에는 tomcat의 server부분에 URIEncoding="UTF-8"을 붙여서 한글호환이 되도록 수정해줌

 - containsKey Method --> 해당 HashMap에 해당 Key값이 있는지 판단
    - ex. map.containsKey("aaa"); -> aaa라는 Key왜 존재여부 판단(Return Type, true)

 - ExtendStringUtils.defaultIfNull(adminInfo.get("logErrcnt"), "0")
    - NullPointException을 안하기 위해 Null Check 함수





 ----------------------------------------------------------------------------- STREAM -----------------------------------------------------------------------------------

 String vs StringBuffer vs StringBuilder


 String 한 번 생성되면 할당된 메모리 공간이 변하지 않음, 변경시 새로운 메모리 공간에 새로 저장
	--> 연산이 적고 Immutable한객체에 사용

 StringBuffer 각 메서드 별로 Synchronized Keyword가 존재하여 멀티 스레드 환경에서도 동기화를 지원함
	--> 멀티 스레드에 사용

 StringBuilder 동기화를 지원하지 않음 멀티 스레드인경우에 불리함
	--> 단일스레드에 사용

 BufferedReader/BufferedWriter 스트림으로부터 문자를 읽어들이거나 문자 출력 스트림으로 문자를 내보낼때 버퍼링을 함으로써 문자, 문자 배열, 문자열 라인등을 보다 효율적으로 처리할 수 있도록 해준다.
    - Buffering: 버퍼(임시저장소)에 저장되는 작업을 하고 있다는 것을 의미
 
 InputStreamReader / OutputStreamWriter: 바이트 스트림에서 문자 스트림으로 또는 문자스트림에서 바이트 스트림으로 변환을 제공하는 입출력 스트림

 StreamReader.ReadLine: 현재 스트림에서 한줄의 문자를 읽어고 데이터를 문자열로 반환한다.

 StringBuffer append(): 매개변수로 입력된 값을 문자열로 변환하여 StringBuffer 인스턴스가 저장하고 있는 문자열 뒤에 붙인다.

 HttpURLConnection  application과 URL간의 통신링크를 위한 작업을 수행
   - RequestProperty('key','value')  	Request 헤더 값 설정
   - RequestMethod(" - ")  		요청 방식 설정(POST,...)
   - ConnectionTimeout(value) 		연결 타임아웃 설정
   - DoOutput(true)  			Connection을 출력 가능하도록 수정(기본 값 false)
   - DoInput(true)   			Connection을 입력 가능하도록 수정(기본 값 false)


 ----------------------------------------------------------------------------- JSP -----------------------------------------------------------------------------------





로그 찍기
console.log("  ");


 - form안에서 type없이 button이 사용된경우 의무적(?)으로 데이터를 전송함!!(return false;가 안먹힘) 이런경우에는 type = "button"을 추가해 주거나 
이부분을 form 밖으로 보내주면 됨

 - <button onclick="history.back()">목록</button>     뒤로가기

$("#startDate").val()


 - change변화를 감지할때는 document ready 부분에 넣어야함!!

$("[name=direct_link_use_yn]").change(function(){
			if($("input:radio[name=direct_link_use_yn]:checked").val() == 'Y'){
				$("#marking").html("*"); 
			}else{
				$("#marking").html("");
			}
		}); 

 - radio나 checkbox의 경우 값을 확인할때 뒤에 checked를 붙여줘야 함

$("input:radio[name=direct_link_use_yn]:checked").val()


 - jsp에서 submit은 input된 값을 전부 보내주는 형식(HashMap사용이 좋음)
 - var ar = $("input[name=ar]").eq( intLoop ).val(); (eq의 의미는 intLoop(정수)번째 값을 가져온다는 의미를 가짐)
   formData.append('ar',ar);
   위의 경우 하나씩 데이터를 전달함

 - JSP에서 값을 받아서 출력해 줄때 value에 ""(큰따옴표)를 넣지 않으면 띄어쓰기 전까지만 String으로 인식하고 출력함
    ex)서울특별시 마포구...  -> 서울특별시

 DEBBUGING
 - 그냥 onClick Function만 사용한 경우 자기 자신으로 돌아올 수 없기 때문에 This Object를 사용해서 지정을 해 줘야함
 onclick="fn_checkOne('all','R', this)"

 function fn_checkOne(all, col, obj){
 
 }

 -> $(obj)의 형식으로 Debbuging 가능
 -> $(obj).closest("ul").parent().find("input[type='checkbox'][id='------']")
 -> $(obj).find(":checked[id*= '------']"),  조건이 checked임으로 checkbox를 포함하는 듯??, checked된 checkbox만 불러옴



  - 특정 ext의 File 받기
    $("input[type='file'][name='-----']").change(function() {
        var ext = this.value.substr(this.value.lastIndexOf('.') + 1).toLowerCase();
        switch (ext) {
            case 'ppt':
            case 'pptx':
            case 'pdf':
            case 'ppsx':
            case 'pps':
            	
                break;
            default:
                alert('ppt, .pptx, .pps, .ppsx, .pdf 파일만 업로드 가능합니다.');
                this.value = '';
        }
    });

 - GET방식의 데이터 전송의 경우 param을 통해서 전달받고 ""(큰따옴표)사이에 넣지 않으면 '0'같은경우 사라짐
    ex. "${param.search_category}" == this.code

 ----------------------------------------------------------------------------- SQL -----------------------------------------------------------------------------------

 - & -> &amp;로 써야 함

 - CASE문
	CASE WHEN HR_JOB_FIELD_CODE = 0001 THEN
                CASE WHEN HR_JOB_CATEGORY_CODE = 0001 THEN '기획' 
                     WHEN HR_JOB_CATEGORY_CODE = 0002 THEN '웹디자인' 
                     WHEN HR_JOB_CATEGORY_CODE = 0003 THEN '퍼블리싱' 
                     WHEN HR_JOB_CATEGORY_CODE = 0004 THEN '웹개발'
                     WHEN HR_JOB_CATEGORY_CODE = 0005 THEN '서버인프라'
                     WHEN HR_JOB_CATEGORY_CODE = 0006 THEN '게임개발' END
              WHEN HR_JOB_FIELD_CODE = 0002 THEN
              	CASE WHEN HR_JOB_CATEGORY_CODE = 0001 THEN '3D모델러' 
                  	WHEN HR_JOB_CATEGORY_CODE = 0002 THEN '애니메이터'
                   	WHEN HR_JOB_CATEGORY_CODE = 0003 THEN '편집&amp;인쇄'
                   	WHEN HR_JOB_CATEGORY_CODE = 0004 THEN '캐릭터디자인' END 
                END hr_job_category


 - 날짜 포맷 변경
	<fmt:formatDate pattern="yyyy.MM.dd" value="${detail.regDt}" />

 ----------------------------------------------------------------------------- AJAX -----------------------------------------------------------------------------------

 - 데이터 변화에 대한 적용 방법
   $("#searchExchStat").on('change', function(){
        goSearch();
   });


 ----------------------------------------------------------------------------- 배포 -----------------------------------------------------------------------------------

War파일로 배포해야하며 Source는 추가하지 않아야함, 
Log4...는 Jbos 자체 에서도 있어서 Log4를 추가한채로 배포하면 충돌이 일어남, Log4...를 주석처리해놓고 배포해야함



 ----------------------------------------------------------------------------- 기타 -----------------------------------------------------------------------------------
Toad
id: pho0987@naver.com
비번: 기본비번

크롬은 scrollbars = no가 안먹고 style로 변경해줘야함


 ----------------------------------------------------------------------------- 기타 -----------------------------------------------------------------------------------
Eclipse Software 설치 중(Android Studio, STS...) 오류 발생시 
 - Window -> Preference -> Install/Update에서 다른부분 모드 체크 해제 후 재설치




